// <auto-generated />
using System;
using Dataaccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dataaccess.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Authorbookjunction", b =>
                {
                    b.Property<string>("Authorid")
                        .HasColumnType("text")
                        .HasColumnName("authorid");

                    b.Property<string>("Bookid")
                        .HasColumnType("text")
                        .HasColumnName("bookid");

                    b.HasKey("Authorid", "Bookid")
                        .HasName("authorbookjunction_pkey");

                    b.HasIndex("Bookid");

                    b.ToTable("authorbookjunction", "library");
                });

            modelBuilder.Entity("Dataaccess.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("author_pkey");

                    b.ToTable("author", "library");
                });

            modelBuilder.Entity("Dataaccess.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Genreid")
                        .HasColumnType("text")
                        .HasColumnName("genreid");

                    b.Property<int>("Pages")
                        .HasColumnType("integer")
                        .HasColumnName("pages");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("book_pkey");

                    b.HasIndex("Genreid");

                    b.ToTable("book", "library");
                });

            modelBuilder.Entity("Dataaccess.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("genre_pkey");

                    b.ToTable("genre", "library");
                });

            modelBuilder.Entity("efscaffold.Entities.Library", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Authorbookjunction", b =>
                {
                    b.HasOne("Dataaccess.Author", null)
                        .WithMany()
                        .HasForeignKey("Authorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("authorbookjunction_authorid_fkey");

                    b.HasOne("Dataaccess.Book", null)
                        .WithMany()
                        .HasForeignKey("Bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("authorbookjunction_bookid_fkey");
                });

            modelBuilder.Entity("Dataaccess.Book", b =>
                {
                    b.HasOne("Dataaccess.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("Genreid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("book_genreid_fkey");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Dataaccess.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
